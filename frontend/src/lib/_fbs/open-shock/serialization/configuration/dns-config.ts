// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DnsConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DnsConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDnsConfig(bb:flatbuffers.ByteBuffer, obj?:DnsConfig):DnsConfig {
  return (obj || new DnsConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDnsConfig(bb:flatbuffers.ByteBuffer, obj?:DnsConfig):DnsConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DnsConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Whether to use DHCP to automatically configure the network
 */
useDhcp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The primary DNS server (overridden by DHCP if auto is true)
 */
primary():string|null
primary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
primary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The secondary DNS server (overridden by DHCP if auto is true)
 */
secondary():string|null
secondary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
secondary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The fallback DNS server (used if the primary and secondary DNS servers fail both in auto and manual mode)
 */
fallback():string|null
fallback(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fallback(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDnsConfig(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUseDhcp(builder:flatbuffers.Builder, useDhcp:boolean) {
  builder.addFieldInt8(0, +useDhcp, +false);
}

static addPrimary(builder:flatbuffers.Builder, primaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, primaryOffset, 0);
}

static addSecondary(builder:flatbuffers.Builder, secondaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, secondaryOffset, 0);
}

static addFallback(builder:flatbuffers.Builder, fallbackOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fallbackOffset, 0);
}

static endDnsConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDnsConfig(builder:flatbuffers.Builder, useDhcp:boolean, primaryOffset:flatbuffers.Offset, secondaryOffset:flatbuffers.Offset, fallbackOffset:flatbuffers.Offset):flatbuffers.Offset {
  DnsConfig.startDnsConfig(builder);
  DnsConfig.addUseDhcp(builder, useDhcp);
  DnsConfig.addPrimary(builder, primaryOffset);
  DnsConfig.addSecondary(builder, secondaryOffset);
  DnsConfig.addFallback(builder, fallbackOffset);
  return DnsConfig.endDnsConfig(builder);
}
}
