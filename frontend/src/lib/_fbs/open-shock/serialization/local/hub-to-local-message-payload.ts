// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { AccountLinkCommandResult } from '../../../open-shock/serialization/local/account-link-command-result';
import { ErrorMessage } from '../../../open-shock/serialization/local/error-message';
import { ReadyMessage } from '../../../open-shock/serialization/local/ready-message';
import { SetRfTxPinCommandResult } from '../../../open-shock/serialization/local/set-rf-tx-pin-command-result';
import { WifiIpChangedEvent } from '../../../open-shock/serialization/local/wifi-ip-changed-event';
import { WifiNetworkEvent } from '../../../open-shock/serialization/local/wifi-network-event';
import { WifiScanStatusMessage } from '../../../open-shock/serialization/local/wifi-scan-status-message';


export enum HubToLocalMessagePayload {
  NONE = 0,
  ReadyMessage = 1,
  ErrorMessage = 2,
  WifiScanStatusMessage = 3,
  WifiNetworkEvent = 4,
  WifiIpChangedEvent = 5,
  AccountLinkCommandResult = 6,
  SetRfTxPinCommandResult = 7
}

export function unionToHubToLocalMessagePayload(
  type: HubToLocalMessagePayload,
  accessor: (obj:AccountLinkCommandResult|ErrorMessage|ReadyMessage|SetRfTxPinCommandResult|WifiIpChangedEvent|WifiNetworkEvent|WifiScanStatusMessage) => AccountLinkCommandResult|ErrorMessage|ReadyMessage|SetRfTxPinCommandResult|WifiIpChangedEvent|WifiNetworkEvent|WifiScanStatusMessage|null
): AccountLinkCommandResult|ErrorMessage|ReadyMessage|SetRfTxPinCommandResult|WifiIpChangedEvent|WifiNetworkEvent|WifiScanStatusMessage|null {
  switch(HubToLocalMessagePayload[type]) {
    case 'NONE': return null; 
    case 'ReadyMessage': return accessor(new ReadyMessage())! as ReadyMessage;
    case 'ErrorMessage': return accessor(new ErrorMessage())! as ErrorMessage;
    case 'WifiScanStatusMessage': return accessor(new WifiScanStatusMessage())! as WifiScanStatusMessage;
    case 'WifiNetworkEvent': return accessor(new WifiNetworkEvent())! as WifiNetworkEvent;
    case 'WifiIpChangedEvent': return accessor(new WifiIpChangedEvent())! as WifiIpChangedEvent;
    case 'AccountLinkCommandResult': return accessor(new AccountLinkCommandResult())! as AccountLinkCommandResult;
    case 'SetRfTxPinCommandResult': return accessor(new SetRfTxPinCommandResult())! as SetRfTxPinCommandResult;
    default: return null;
  }
}

export function unionListToHubToLocalMessagePayload(
  type: HubToLocalMessagePayload, 
  accessor: (index: number, obj:AccountLinkCommandResult|ErrorMessage|ReadyMessage|SetRfTxPinCommandResult|WifiIpChangedEvent|WifiNetworkEvent|WifiScanStatusMessage) => AccountLinkCommandResult|ErrorMessage|ReadyMessage|SetRfTxPinCommandResult|WifiIpChangedEvent|WifiNetworkEvent|WifiScanStatusMessage|null, 
  index: number
): AccountLinkCommandResult|ErrorMessage|ReadyMessage|SetRfTxPinCommandResult|WifiIpChangedEvent|WifiNetworkEvent|WifiScanStatusMessage|null {
  switch(HubToLocalMessagePayload[type]) {
    case 'NONE': return null; 
    case 'ReadyMessage': return accessor(index, new ReadyMessage())! as ReadyMessage;
    case 'ErrorMessage': return accessor(index, new ErrorMessage())! as ErrorMessage;
    case 'WifiScanStatusMessage': return accessor(index, new WifiScanStatusMessage())! as WifiScanStatusMessage;
    case 'WifiNetworkEvent': return accessor(index, new WifiNetworkEvent())! as WifiNetworkEvent;
    case 'WifiIpChangedEvent': return accessor(index, new WifiIpChangedEvent())! as WifiIpChangedEvent;
    case 'AccountLinkCommandResult': return accessor(index, new AccountLinkCommandResult())! as AccountLinkCommandResult;
    case 'SetRfTxPinCommandResult': return accessor(index, new SetRfTxPinCommandResult())! as SetRfTxPinCommandResult;
    default: return null;
  }
}
